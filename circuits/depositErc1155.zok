from "./common/hashes/mimc/altbn254/mimc3.zok" import main as mimc3
from "utils/pack/bool/nonStrictUnpack256.zok" import main as field_to_bool_256
from "hashes/poseidon/poseidon.zok" import main as poseidon

def main(\
	public field amount,\
	public field tokenId,\
	private field  msgSender,\
	private field tokenOwners_msgSender_tokenId_0_newCommitment_owner_publicKey,\
	private field tokenOwners_msgSender_tokenId_0_newCommitment_salt,\
	public field tokenOwners_msgSender_tokenId_0_newCommitment_commitment\
) -> (bool):

        
        // We need to hard-code the mappingId's of mappings into the circuit:
        field tokenOwners_mappingId = 15

        field tokenOwners_msgSender_tokenId_0_stateVarId_field = mimc3([tokenOwners_mappingId,  msgSender,tokenId])


        field tokenOwners_msgSender_tokenId_1_stateVarId_field = mimc3([tokenOwners_mappingId,  msgSender,tokenId])


        // prepare secret state 'tokenOwners_msgSender_tokenId_0' for commitment

        field tokenOwners_msgSender_tokenId_0_newCommitment_value_field = amount

        // tokenOwners_msgSender_tokenId_0_newCommitment_commitment - preimage check

        field tokenOwners_msgSender_tokenId_0_newCommitment_commitment_check_field = poseidon([\
          tokenOwners_msgSender_tokenId_0_stateVarId_field,\
          tokenOwners_msgSender_tokenId_0_newCommitment_value_field,\
          tokenOwners_msgSender_tokenId_0_newCommitment_owner_publicKey,\
          tokenOwners_msgSender_tokenId_0_newCommitment_salt\
        ])

        assert(\
          field_to_bool_256(tokenOwners_msgSender_tokenId_0_newCommitment_commitment)[8..256] == field_to_bool_256(tokenOwners_msgSender_tokenId_0_newCommitment_commitment_check_field)[8..256]\
        )

         return true