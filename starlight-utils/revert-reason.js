require("dotenv").config();
const { ethers, JsonRpcProvider } = require("ethers");
const abi = require("./swapescrow-shield.abi.json");
const axios = require("axios");
const { forEach } = require("general-number/logger");

// Infura provider
const provider = new JsonRpcProvider(process.env.STARLIGHT_RPC_URL);
const escrowShieldContractAddress = process.env.STARLIGHT_ESCROWSHIELD_ADDRESS;

async function main() {
  // Define the contract
  await getRevertReason("0xfb0381f448bf8f29bbdd261975b04329e9a0ffc908adec48db93d84f6b244f87");

  console.log("process.env.STARLIGHT_RPC_URLs: ", process.env.STARLIGHT_RPC_URL);
  const escrowShieldContract = new ethers.Contract(escrowShieldContractAddress, abi, provider)
  
  // Find the ABI of the startSwapFromErc20ToErc1155 function
  const functionAbi = abi.find(
    (item) => item.name === "startSwapFromErc20ToErc1155"
  );

  // Create an Interface with the function's ABI
  const iface = new ethers.Interface([functionAbi]);

  // The encoded data you want to decode
  const data = "0xc3a8fcc0000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000000c018708e480bb78ae001c29e74ebfadfa32a4e1a886e9793c5418a57ea71cca865000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000000305749c587729e84ffd9b03482b7aa25e43d46f803d3546b716c29a4880b19d842f7cf75220976d3155b30e791a173f75ed208bdb0c055f60ca5fdf10db62a160082aca46ccde1ea42fa486dc235b6467049b76650c3563168be52908c0c4874200000000000000000000000000000000000000000000000000000000000000021b82d70e6bf9160b41c9575a1581128a92877d34abe2978c1aff9fd5906834582ad0b7e389362a9bf1f2c9aad51f7fc8340ea54d7807da6f08213acfa28031d900000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000e2aadd4ed8234593eb885835b68ebb79b117217761757486ba6e7610f7f4afc220f582b976b7a142d76f275223baf3150e1e432465d2a857736a2626e286db4d4138c3fdcbd67870aa6caeeefe98698ec6ff639c73a669e3ca9f2e66823f7735a212aa342f59b6816ce809f542f4a1edd8686c36ceb3ef7c84952cf94fe8ed08107c231f0393e1734ad1709e9837a7b8c976cc94f671c21dcd84c904eaed146eb1f2121b8f0a71fa6ac15a483743c896ec34cc7d5a940a558db16ec7930f822741aa890a311fde5c03268268cfd6682c4f789bf3034bfaa5b958f6f2b200ea35800d6363ccdbc38cf89be549c3a66972cce07f2f0f8da2f4e390d984f04f0ec27035db389cd8aebb94d24cb4618d553ddc7cf875c525842899b3897c90c38c0221c1128b95744f26bc4b3d9d7ca4e40473dc2d565a87643507cbac7a7ba15c9382a6beef00c5d0a99670653216e39092becbc4230e11286276334102adbcec045246772fd8a36ac9c401c00ed478df56666ef23e7b919eeeac9863544225f138818e04827acfbff56832ffb3daac54b90e0546f0c42b257f4c989cbf77fd5bd9a17264af9eed4aec11389b6816b42b140372adc1d387d4a14a93939ff3baf97d40000000000000000000000000000000000000000000000000000000000000001115a276e543501444c35487328e73d1670f14b85fd36f2b18d83e1abd56e72aa28a3220fe575f31990c2fb5c56aa6675036d3421eff98ab44f9facfcac82bab2000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000f60000000000000000000000000000000000000000000000000000000000000008006d13dff5d4bff9a8bab6314d2fe50906d4c13223b77c30a3143fc329a9eb122fa5d4e9f018d8a42b3fabfb089a5370609dd2ccda0fd9880e248ef6b93fd6692d4f594e82e738ce8c6d300a67cd3a555b21e3540c15d423d9e353941960951c23b50c07e59bacbc27ff67ea74e6d2ea3da1cf43f06b78760008b92510c411232042268e0fe2962e7fac7adfa7d1ffc7df0dbb0e5ee39528693082790aeae59e067cf91e713126ffe516ba41b30454a5399010e2ed0a3116558f273c634497341afdf25cc2269881dcd5cb2f6d2f50df9a9542cad89980f0020c9fe9ff78438e1f4dd02c613d5ec8eb564d854d0d1c78655507a0d180a8fd851334851c3c7a3e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000090c902b4e8ed491e17d1a0bc535d28de3b8398bd571cedfe8a1e50cac020eeeb805c95c9a690cf5843646ccab23a84329528f56db43309855467850c5a136d064266cca0e0cf80d84f064bae1af9c2f90c0c67442d14cc592c504d427dc19efbb24c2579ad6ce524298b6aa568e6bb009ce1437476dd8530eece287f8a3dae90c19c95c7976ad15e68d165808a0dd1e78e3781dc6d2fc1a232bf19e1a2963e33e1a7c54a61757ef38ab398cfc2455ed1ee45c36ca80da7e7bc94f68b47ffc08230fb11dd9cdfee7e29a92fcb178433c45d998b91133ee1e37d52bdc3d5f24de4e0481e3e6ee5d97d26a1483d7321d5a956461a464989764923a0320353e207dcf2ac48adf1a01fe6378b7249704acc557e4c9ac36091c1e657a9b9d49044f611c00000000000000000000000000000000000000000000000000000000000000141bde0c23ac11a6722d437e15f570fb2159c0b3ee3df422cb8f06a7a61426ec3905c95c9a690cf5843646ccab23a84329528f56db43309855467850c5a136d066266cca0e0cf80d84f064bae1715e5a8793367b5dcddbf51a8745ccac272c4ccd2c66d4350918d49d01fe631ff309f0e18d3225a5b3c5c87d2f0416a20bcad1d719c95c7976ad15e68d165808a0dd1e78e3781dc6d2fc1a232bf19e1a2963e33e00db459c0ee660ef89d350f45a63e6a1334119e8b76334287aabb2ea2e0f01840f5e3a95bf71e8ea2111f102ee94bbb92561a14325948d91ed26639f778dac4f2b99d1890d2e20d19072f4818da97158b269c81020aaafc0640ac1eb6f04b03d2ac48adf1a01fe6378b7249704acc557e4c9ac36091c1e657a9b9d49044f3f0e18e5cf8a913dd0d0c859943817905e5cec45834cf0f0e3531fbd7356261ec7a91fea7afe7511a854409a3950698ac9040489626e52ee5fd907974ee230a870d3067fb39b3b4eb0cb917fa4ef03cb9ab787ea2a62bc53a2a4e9a1600eaeba8cf21675f6848b39d417808bc973ccdfc90dcd58e48901f5c05c1acdb6bdb85706742dfbd3e14b4268c3a2ffd2a4b8b834791e8aaa6ac740f3e52adaeb307853226e010d9b5004b410cf4facda4e2eaa89e946c2a307b293671b10f2e7eb53754e1201beba1d935284ed404867558b9641ee40bee3128c7747d9bf3b7f66016eeca6100acfa1fc9f1b222778337faf1f680504469c69bfe7a3d8357b94c2e6e3da962a2d2aba29a67d11c91b338413e8efc3c631c14ed3d7994c52d3fed24141fb6905cc25a88df46d7eb654adcafa522a23e10a7f5541a4978511d0f0035cfd2b53280bcf029498281e49fd02471b27fc3679fb684caa457ce7b3c8782d39bc7138"; // replace with your data

  // Decode the data
  const decoded = iface.decodeFunctionData(functionAbi.name, data);
  const newNullifiers = decoded[0][0];
  newNullifiers.forEach(async (nullifier) => {
    console.log("checking this nullifier from transaction call:", nullifier)
    const existNullifier = await escrowShieldContract.nullifiers(nullifier)
    if (existNullifier > 0n) {
      getPastNullifiersEvents(escrowShieldContract,existNullifier, 533400, 533454)
    }
  });

}

async function getPastNullifiersEvents(contract, existNullifier, fromBlock, toBlock) {
  const filter = contract.filters.Nullifiers();
  const events = await contract.queryFilter(filter, fromBlock, toBlock);

  events.forEach((event) => {
    const eventParams = event.args[0];
    eventParams.forEach((param) => {
      if (existNullifier === param) {
        console.log("Found the nullifier in the event logs", param);
      }
    });
  });
}

async function getRevertReason(txHash) {
  try {
    const tx = await provider.getTransaction(txHash);
    await provider.call(tx, tx.blockNumber);
  } catch (e) {
    console.log("Revert Reason: ", e.reason)
    /*
    const code =
      "0x08c379a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000184e756c6c696669657220616c7265616479206578697374730000000000000000";
    if (code.substr(138)) {
      const reason = ethers.toUtf8String("0x" + code.substr(138));
      console.log("Revert reason:", reason);
      return reason;
    } else {
      console.log("Cannot get revert reason");
      return null;
    }
    */
    return null;
  }
}

try {
  main();
} catch (error) {
  console.error(error);
}
